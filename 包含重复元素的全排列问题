class Solution {
public:
    vector<vector<int> > permuteUnique(vector<int> &num) {
        vector<vector<int> > v;
        int size = num.size();
        if(size < 1)
            return v;
        permution(num, v, size, 0);
        
        return v;
    }
    bool isCanSwap(vector<int>& num, int& size, int index)
    {
        for(int i = index+1; i < size; ++i)
        {
            if(num[index] == num[i])
                return false;
        }
        return true;
    }
    void permution(vector<int>& num, vector<vector<int> >& v, int& size, int index)
    {
        if(index == size-1)
        {
            v.push_back(num);
            return;
        }
        for(int i = index; i < size; ++i)
        {
            if(isCanSwap(num, size, i))
            {
                swap(num[i], num[index]);
                permution(num, v, size, index+1);
                swap(num[i], num[index]);
            }
        }
    }
};
